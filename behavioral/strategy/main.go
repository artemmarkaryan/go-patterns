/*
–°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç
—Å–µ–º–µ–π—Å—Ç–≤–æ —Å—Ö–æ–∂–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –ø–æ–º–µ—â–∞–µ—Ç –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å, –ø–æ—Å–ª–µ
—á–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è—Ç—å –ø—Ä—è–º–æ –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
*/

package main

import (
	"fmt"
	"time"
)

type Logger interface {
	log(message string)
}

type LogWithTime struct{}

func (l LogWithTime) log(message string) {
	fmt.Printf("%v: %v\n", time.Now().Format(time.Kitchen), message)
}

type LogWithEmoji struct{}

func (l LogWithEmoji) log(message string) {
	fmt.Printf("üòé: %v\n", message)
}

type Process struct {
	// –í logger –ª–µ–∂–∏—Ç –∑–∞–º–µ–Ω—è–µ–º–∞—è –ª–æ–≥–∏–∫–∞
	// –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É
	logger Logger
}

func (p *Process) SetLogger(l Logger) {
	p.logger = l
}

func (p *Process) DoSth() {
	p.logger.log("I did something")
}

func main() {
	someProcess := Process{}

	someProcess.SetLogger(LogWithTime{})
	someProcess.DoSth()

	someProcess.SetLogger(LogWithEmoji{})
	someProcess.DoSth()
}
